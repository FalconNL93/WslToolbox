# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net
name: '$(ProductMajorVersion).$(ProductMinorVersion).$(date:yy)$(DayOfYear)$(rev:.r)'
trigger:
  - develop
  - beta

pool:
  vmImage: 'windows-2022'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  binariesDirectory: "$(Build.BinariesDirectory)/publish"
  
  # Product Information
  ProductName: 'WSL Toolbox'
  ProductMajorVersion: '0'
  ProductMinorVersion: '5'
  ProductTargetFramework: 'net5.0-windows10.0.19041.0'
  ProductDescription: 'WSL Toolbox allows you to manage your WSL Distributions through an easy to use interface.'
  ProductUuid: 'FalconNL93.WSLToolbox'
  ProductVersion: $(Build.BuildNumber)
  ProductEnvironment: $(buildConfiguration)
  ProductUrl: $(Build.Repository.Uri)
  OutputFile: 'wsltoolbox-$(Build.BuildNumber)'

stages:
  - stage: Build
    jobs:
      - job: NuGet
        steps:
          - task: NuGetToolInstaller@1
          - task: NuGetCommand@2
            inputs:
              restoreSolution: '$(solution)'
          - task: VSBuild@1
            inputs:
              solution: '$(solution)'
              msbuildArgs: '/p:OutputPath=$(binariesDirectory)'
              platform: 'Any CPU'
              configuration: 'Release'
              msbuildArchitecture: 'x64'
              logProjectEvents: false
              enableDefaultLogger: false

          - task: VSTest@2
            inputs:
              platform: 'Any CPU'
              configuration: 'Release'

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(binariesDirectory)'
              artifactName: Binaries

  - stage: Package
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/beta'))
    jobs:
      - job: CreateInnoSetup
        displayName: "Inno Setup"
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: Binaries
              downloadPath: '$(binariesDirectory)'

          - task: PowerShell@2
            displayName: 'Install InnoSetup'
            inputs:
              targetType: 'inline'
              script: 'choco install innosetup'

          - task: PowerShell@2
            displayName: 'Build Setup'
            inputs:
              pwsh: true
              filePath: 'WslToolbox.Setup\\build.ps1'
              arguments: '-BinariesDirectory "$(binariesDirectory)/Binaries"'
            env:
              ProductName: $(ProductName)
              ProductDescription: $(ProductDescription)
              ProductVersion: $(Build.BuildNumber)
              ProductUuid: $(ProductUuid)
              SetupOutputFile: $(OutputFile)

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: 'WslToolbox.Setup\\bin'
              artifactName: Setup

      - job: CreateZipArchive
        displayName: "ZIP-archive"
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Build Artifacts'
            inputs:
              artifactName: Binaries
              downloadPath: $(binariesDirectory)

          - task: ArchiveFiles@2
            displayName: 'ZIP-archive'
            inputs:
              rootFolderOrFile: '$(binariesDirectory)/Binaries'
              includeRootFolder: false
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/$(OutputFile).zip'
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            inputs:
              pathtoPublish: '$(Build.ArtifactStagingDirectory)'
              artifactName: ZIP

  - stage: Publish
    dependsOn: Package
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/beta'))
    jobs:
      - job: Publish
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Release Artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              itemPattern: |
                **/$(OutputFile).zip
                **/$(OutputFile)-setup.exe
              downloadPath: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: Release
              publishLocation: 'Container'

  - stage: Release
    dependsOn: Publish
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/beta'))
    jobs:
      - job: GitHub
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Release Artifacts'
            inputs:
              artifactName: Release
              downloadPath: '$(Build.ArtifactStagingDirectory)'

          - task: GitHubRelease@1
            inputs:
              gitHubConnection: 'PAT'
              repositoryName: '$(Build.Repository.Name)'
              action: 'create'
              target: '$(Build.SourceVersion)'
              tagSource: 'userSpecifiedTag'
              tag: '$(Build.BuildNumber)'
              title: '$(Build.BuildNumber)'
              releaseNotesSource: 'inline'
              isDraft: true
              isPreRelease: true
              changeLogCompareToRelease: 'lastNonDraftRelease'
              changeLogType: 'commitBased'
              assets: |
                $(Build.ArtifactStagingDirectory)/Release/Setup/*
                $(Build.ArtifactStagingDirectory)/Release/ZIP/*